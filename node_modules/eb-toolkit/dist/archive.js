"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const archiver_1 = __importDefault(require("archiver"));
const debug = require('debug')('eb:application');
class Archive {
    constructor(application, s3) {
        this.application = application;
        this.s3 = s3;
    }
    checkUploaded(applicationName, versionLabel) {
        return __awaiter(this, void 0, void 0, function* () {
            debug(`Checking if version label ${versionLabel} is already uploaded`);
            const allApplicationVersions = yield this.application.getApplicationVersions(applicationName);
            return allApplicationVersions.includes(versionLabel);
        });
    }
    upload({ applicationName, filePath, versionLabel = Date.now().toString(), }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.checkUploaded(applicationName, versionLabel)) {
                debug(`Version label ${versionLabel} already exists for application ${applicationName}`);
                return;
            }
            if (!fs_1.default.existsSync(filePath)) {
                throw new Error(`File path ${filePath} does not exist`);
            }
            if (fs_1.default.statSync(filePath).isDirectory()) {
                debug(`Zipping folder ${filePath}`);
                const tempDir = yield fs_1.default.mkdtempSync(path_1.default.join(os_1.default.tmpdir(), 'eb-toolkit-'));
                const outFile = path_1.default.join(tempDir, `${versionLabel}.zip`);
                yield this.zipFolder(filePath, outFile);
                filePath = outFile;
            }
            const { S3Bucket: s3Bucket, } = yield this.application.createStorageLocation();
            if (!s3Bucket) {
                throw new Error(`Failed to create S3 bucket`);
            }
            const key = yield this.uploadToS3(s3Bucket, filePath);
            yield this.application.createApplicationVersion({
                applicationName,
                bucket: s3Bucket,
                versionLabel,
                key,
            });
            return versionLabel;
        });
    }
    uploadToS3(s3Bucket, filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            debug(`Uploading ${filePath} to bucket ${s3Bucket}`);
            const keyName = path_1.default.basename(filePath);
            yield this.s3
                .upload({
                Bucket: s3Bucket,
                Key: keyName,
                Body: fs_1.default.createReadStream(filePath),
            })
                .promise();
            return keyName;
        });
    }
    zipFolder(source, outFile) {
        const archive = archiver_1.default('zip', { zlib: { level: 9 } });
        const stream = fs_1.default.createWriteStream(outFile);
        return new Promise((resolve, reject) => {
            archive
                .directory(source, false)
                .on('error', err => reject(err))
                .pipe(stream);
            stream.on('close', () => resolve());
            archive.finalize();
        });
    }
}
exports.Archive = Archive;
//# sourceMappingURL=archive.js.map