import AWS, { ElasticBeanstalk } from 'aws-sdk';
import { Environment } from "./environment";
export declare class Application {
    private readonly s3;
    private readonly elasticbeanstalk;
    environment: Environment;
    private archive;
    constructor(credentials?: any);
    /**
     * @param filePath - The path of archive to deploy (e.g. AppName-version.zip)
     * @param environmentName - Environment to provision (e.g. my-awesome-app)
     * @param stack - Stack to provision (e.g. '64bit Amazon Linux 2015.03 v2.0.0 running Node.js')
     * @param config - Configuration overrides for the environment (optional)
     * @param versionLabel - Optional version label
     * @param applicationName - The application name
     * @param tags - This specifies the tags applied to resources in the environment. (optional)
     * @param tier - This specifies the tier ie WebServer (default) or Worker. (optional)
     * @returns Promise
     */
    deploy({ filePath, environmentName, stack, beanstalkConfig: config, versionLabel, applicationName, tags, tier, }: {
        filePath: string;
        environmentName: string;
        applicationName: string;
        stack: string;
        versionLabel?: string;
        beanstalkConfig?: any;
        tags?: any[];
        tier: 'WebServer' | 'Worker';
    }): Promise<ElasticBeanstalk.EnvironmentDescription>;
    terminateEnvironment(args: {
        environmentName: string;
        forceTerminate?: boolean;
    }): Promise<void>;
    cleanApplicationVersions(applicationName: any): Promise<void>;
    cleanEnvironments(appName: string, appEnv: string): Promise<void>;
    getEnvironments(applicationName: string): Promise<ElasticBeanstalk.EnvironmentDescriptionsList>;
    getApplicationVersions(applicationName: string): Promise<(string | undefined)[]>;
    deleteApplication(applicationName: any, terminateEnvByForce?: boolean): Promise<{
        $response: AWS.Response<{}, AWS.AWSError>;
    }>;
    getDefaultEnvironment(appName: string, appEnv: string): Promise<string | undefined>;
    getEnvironmentsForEnv(appName: string, appEnv: string): Promise<ElasticBeanstalk.EnvironmentDescription[]>;
    getSolutionStack(platform: string): Promise<string[]>;
    static getDefaultEnvironmentName(appName: string, appEnv: string): string;
    createStorageLocation(): Promise<import("aws-sdk/lib/request").PromiseResult<ElasticBeanstalk.CreateStorageLocationResultMessage, AWS.AWSError>>;
    createApplicationVersion({ applicationName, bucket, versionLabel, key, }: {
        applicationName: string;
        bucket: string;
        versionLabel: string;
        key: string;
    }): Promise<import("aws-sdk/lib/request").PromiseResult<ElasticBeanstalk.ApplicationVersionDescriptionMessage, AWS.AWSError>>;
    private deleteApplicationVersion;
    swapEnvironmentCNAMEs({ fromEnv, toEnv, }: {
        fromEnv: string;
        toEnv: string;
    }): Promise<void>;
}
