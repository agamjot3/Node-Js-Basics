import { ElasticBeanstalk } from 'aws-sdk';
export declare class Environment {
    private readonly elasticbeanstalk;
    constructor(elasticbeanstalk: ElasticBeanstalk);
    describeEnvironment(environmentName: string): Promise<ElasticBeanstalk.EnvironmentDescription | null>;
    getEnvironment(environmentName: any): Promise<ElasticBeanstalk.EnvironmentDescription>;
    status(environmentName: string): Promise<ElasticBeanstalk.EnvironmentStatus | undefined>;
    deploy({ versionLabel, environmentName, config, }: {
        versionLabel: any;
        environmentName: any;
        config: any;
    }): Promise<void>;
    waitUntil({ environmentName, statusCheck, timeout, }: {
        environmentName: string;
        timeout?: number;
        statusCheck: (desc: ElasticBeanstalk.EnvironmentDescription | undefined) => boolean;
    }): Promise<ElasticBeanstalk.EnvironmentDescription>;
    create({ applicationName, environmentName, versionLabel, config, stack, tags, tier, }: {
        applicationName: string;
        environmentName: any;
        versionLabel: any;
        stack: any;
        config: any;
        tags: any;
        tier: 'Worker' | 'WebServer';
    }): Promise<void>;
    terminate({ environmentName, forceTerminate, }: {
        environmentName: string;
        forceTerminate?: boolean;
    }): Promise<void>;
    checkDNSAvailability(environmentName: any): Promise<boolean | undefined>;
}
