"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require('source-map-support').install();
const application_1 = require("../application");
const deployment_1 = require("../deployment");
const commandModule = {
    describe: 'deploy a beanstalk application version',
    handler: function (argv) {
        return __awaiter(this, void 0, void 0, function* () {
            const deployment = new deployment_1.Deployment({
                region: argv.region,
            });
            const application = new application_1.Application({
                region: argv.region,
            });
            let stack = argv.stack;
            if (!stack && argv.platform) {
                const available = yield application.getSolutionStack(argv.platform);
                stack = available[0];
            }
            if (!stack) {
                throw new Error('Must specify a stack');
            }
            argv.stack = stack;
            yield deployment.deploy(argv);
        });
    },
    command: 'deploy',
    builder: {
        appName: {
            demandOption: true,
            type: 'string',
            description: 'Beanstalk application name',
        },
        appEnv: {
            demandOption: true,
            type: 'string',
            description: 'Beanstalk application env',
        },
        versionLabel: {
            demandOption: false,
            type: 'string',
            description: 'Beanstalk version label',
        },
        filePath: {
            demandOption: true,
            type: 'string',
            description: 'Beanstalk file path',
        },
        stack: {
            demandOption: false,
            type: 'string',
            description: 'Beanstalk stack solution',
        },
        platform: {
            demandOption: false,
            type: 'string',
            description: 'The platform to use (Nodejs/Java)',
        },
        beanstalkConfig: {
            demandOption: false,
            type: 'string',
            description: 'Beanstalk config file path',
        },
        tier: {
            demandOption: false,
            type: 'string',
            description: 'Beanstalk tier',
            default: 'WebServer',
        },
        deploymentStrategy: {
            demandOption: false,
            type: 'string',
            default: 'standard',
            choices: ['bluegreen', 'standard'],
            description: 'Deployment strategy (bluegreen or standard)',
        },
        region: {
            demandOption: false,
            type: 'string',
            description: 'AWS region',
        },
    },
};
exports.default = commandModule;
//# sourceMappingURL=deploy.js.map