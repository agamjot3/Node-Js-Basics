"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const application_1 = require("./application");
const path_1 = __importDefault(require("path"));
const wait_promise_1 = require("wait-promise");
const debug = require('debug')('eb:deployment');
class Deployment {
    constructor(credentials = undefined) {
        this.application = new application_1.Application(credentials);
    }
    deploy(_a) {
        var { deploymentStrategy = 'standard' } = _a, options = __rest(_a, ["deploymentStrategy"]);
        return __awaiter(this, void 0, void 0, function* () {
            if (deploymentStrategy === 'standard') {
                return this.deployStandard(options);
            }
            else {
                return this.deployBlueGreen(options);
            }
        });
    }
    deployStandard({ filePath, appEnv, appName, stack, versionLabel, beanstalkConfig, tags, tier, }) {
        return __awaiter(this, void 0, void 0, function* () {
            debug(`Deploying with strategy standard for App: ${appName}, Env: ${appEnv}, Stack: ${stack}`);
            let defaultEnvName = yield this.application.getDefaultEnvironment(appName, appEnv);
            if (!defaultEnvName) {
                defaultEnvName = application_1.Application.getDefaultEnvironmentName(appName, appEnv);
            }
            return this.application.deploy({
                filePath,
                environmentName: defaultEnvName,
                stack,
                versionLabel,
                applicationName: appName,
                beanstalkConfig: Deployment.getBeanstalkConfig(beanstalkConfig),
                tags,
                tier,
            });
        });
    }
    deployBlueGreen({ filePath, appEnv, appName, stack, versionLabel, beanstalkConfig, tags, tier, }) {
        return __awaiter(this, void 0, void 0, function* () {
            debug(`Deploying with bluegreen standard for App: ${appName}, Env: ${appEnv}, Stack: ${stack}`);
            let defaultEnvName = yield this.application.getDefaultEnvironment(appName, appEnv);
            let environmentName;
            if (defaultEnvName) {
                environmentName = Deployment.getUniqueEnvironmentName(appName, appEnv);
            }
            else {
                defaultEnvName = application_1.Application.getDefaultEnvironmentName(appName, appEnv);
                environmentName = defaultEnvName;
            }
            yield this.application.deploy({
                filePath,
                environmentName,
                versionLabel,
                stack,
                applicationName: appName,
                beanstalkConfig: Deployment.getBeanstalkConfig(beanstalkConfig),
                tags,
                tier,
            });
            if (environmentName !== defaultEnvName) {
                yield this.swapEnvironmentCName({
                    fromEnv: defaultEnvName,
                    toEnv: environmentName,
                });
                debug(`Promoted ${environmentName} to ${defaultEnvName}`);
            }
        });
    }
    static getBeanstalkConfig(beanstalkConfig) {
        if (typeof beanstalkConfig === 'string') {
            return require(path_1.default.resolve(beanstalkConfig));
        }
        return beanstalkConfig;
    }
    static getUniqueEnvironmentName(appName, appEnv, length = 6) {
        const randomSuffix = Math.random()
            .toString(36)
            .slice(2)
            .substring(0, length);
        return `${appName}-${appEnv}-${randomSuffix}`;
    }
    swapEnvironmentCName({ fromEnv, toEnv }) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.application.swapEnvironmentCNAMEs({
                fromEnv,
                toEnv,
            });
            yield wait_promise_1.sleep(60 * 1000);
            return result;
        });
    }
}
exports.Deployment = Deployment;
//# sourceMappingURL=deployment.js.map